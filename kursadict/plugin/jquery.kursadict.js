// Generated by CoffeeScript 1.3.3
/*
A jQuery plugin for enabling the Kursadict functionality

# Installation

HTML header

TODO: clarify how to install this somewhere.


# Development / testing

Install node.js and npm, and then coffeescript.

TODO: write more

## building

Must be compiled with --bare, to prevent function wrapping that disables
jQuery.

    coffee --compile --bare jquery.kursadict.coffee

## watch

    coffee --compile --watch --bare jquery.kursadict.coffee

Or.

    ./compile_and_watch.sh


## TODOs / Features

TODO: need an interface for managing options that isn't the search form,
      maybe a little tab popping out of the side like with the user voice /
      feedback app thing.

      - Icon?
        http://www.iconeasy.com/icon/png/System/Sticker%20Pack%202/Dictionary.png
        http://upload.wikimedia.org/wikipedia/en/d/d1/Dictionary_Icon.png

        maybe one with ášŋ or some clearly sámi symbols

        maybe just make my own without an additional .png requirement?

     - options:

       - target language
       - detail level of information display
       - place of display: tooltip/banner
       - device options: tablet / normal computer


TODO: autodetect from browser language first, fall back to nob otherwise


## TODOs / Bugs

TODO: Når ordet er nesten på enden av nettlesarvindaugo, hengjer popup
      litt utafor vindaugo, so er det vanskeleg å lesa. 
TODO: IE on all OSes seems to select a whole paragraph after a word has been
      selected. There is probably some way to prevent this from occurring.
TODO: prevent window url from updating with form submit params
TODO: lookup timeout
*/

jQuery(document).ready(function($) {
  var API_HOST, Templates, cleanTooltipResponse, getActualIndex, initSpinner, lookupSelectEvent;
  if (window.location.hostname === 'localhost') {
    API_HOST = "http://localhost:5000/";
  } else if (window.location.hostname === 'testing.oahpa.no') {
    API_HOST = "http://" + window.location.hostname + "/";
  }
  Templates = {
    OptionsTab: function(args) {
      var el;
      el = $("<div id=\"webdict_options\" class=\"hidden\">\n  <div class=\"well\">\n  <a class=\"close\" href=\"#\" style=\"display: none;\">&times;</a>\n  <div class=\"trigger\">\n    <h1><a href=\"#\" class=\"open\">Á</a></h1>\n  </div>\n\n  <div class=\"option_panel\" style=\"display: none;\">\n    <ul class=\"nav nav-pills\">\n      <li class=\"active\">\n        <a href=\"#\">Options</a>\n      </li>\n      <li><a href=\"#\">About</a></li>\n    </ul>\n    <form class=\"\">\n      <label class=\"control-label\" for=\"inputEmail\">Dictionary</label>\n       <label class=\"radio\">\n        <input type=\"radio\" name=\"language_pair\" id=\"language_pair1\" value=\"smenob\" checked>\n        Northern Sámi -> Norwegian\n      </label>\n      <label class=\"radio\">\n        <input type=\"radio\" name=\"language_pair\" id=\"language_pair2\" value=\"smefin\">\n        Northern Sámi -> Finnish\n      </label> \n      <br />\n      <label class=\"checkbox\">\n       <input type=\"checkbox\" name=\"detail_level\" />\n       Extra info\n      </label>\n      <button type=\"submit\" class=\"btn\">Save</button>\n    </div>\n  </div>\n  </form>\n</div>");
      el.find('.trigger').click(function() {
        var optsp;
        optsp = el.find('div.option_panel');
        optsp.toggle();
        return el.find('a.close').toggle();
      });
      el.find('a.close').click(function() {
        var optsp;
        optsp = el.find('div.option_panel');
        optsp.toggle();
        return el.find('a.close').toggle();
      });
      el.find('form').submit(function() {
        var optsp;
        optsp = el.find('div.option_panel');
        optsp.toggle();
        el.find('a.close').toggle();
        return false;
      });
      return el;
    },
    ErrorBar: function(args) {
      var el, host;
      host = args.host;
      el = $("<div class=\"errornav navbar-inverse navbar-fixed-bottom\">\n  <div class=\"navbar-inner\">\n    <div class=\"container\">\n      <p><strong>Error!</strong> Could not connect to dictionary server (host: " + host + ".\n         <a href=\"#\" class=\"dismiss\">Close</a>.</p>\n    </div>\n  </div>\n</div>");
      el.find('.errornav .dismiss').click(function() {
        $(document).find('body .errornav').remove();
        return false;
      });
      return el;
    }
  };
  initSpinner = function() {
    /*
            spinner popup in right corner; `spinner = initSpinner()` to
            create or find, then usual `spinner.show()` or `.hide()` as
            needed.
    */

    var spinner, spinnerExists;
    spinnerExists = $(document).find('.spinner');
    if (spinnerExists.length === 0) {
      spinner = $("<img src=\"img/spinner.gif\" class=\"spinner\" />");
      spinner.css({
        display: "none",
        position: "absolute",
        top: "0px",
        right: "0px"
      });
      $(document).find('body').append(spinner);
      return spinner;
    }
    return spinnerExists;
  };
  getActualIndex = function(selection) {
    var baseOffset, extentOffset, last, _left, _ref;
    _ref = selection.index, baseOffset = _ref[0], extentOffset = _ref[1];
    if (baseOffset === extentOffset) {
      _left = $(selection.element).html().slice(0, baseOffset);
      last = _left.match(/[^\s.]*$/);
      if (last[0] !== "") {
        return baseOffset - last[0].length;
      } else {
        return baseOffset;
      }
    } else {
      return baseOffset;
    }
    return selection.index[0];
  };
  cleanTooltipResponse = function(selection, response, opts) {
    /*
            Clean response from tooltip $.ajax query, and display results
    */

    var clean_right, element, i, index, indexMax, lookup, r, result, result_string, result_strings, right, string, _i, _j, _k, _l, _left, _len, _len1, _len2, _len3, _mid, _mid_new, _new_html, _ref, _ref1, _ref2, _ref3, _results, _right, _str, _tooltipTarget, _tooltipTitle, _wrapElement;
    if (!selection.index) {
      console.log("no index!");
    }
    string = selection.string;
    element = selection.element;
    index = getActualIndex(selection);
    indexMax = index + string.length;
    if (opts.tooltip) {
      $(element).find('a.tooltip_target').each(function() {
        $(this).popover('destroy');
        return $(this).replaceWith(this.childNodes);
      });
      _wrapElement = "<a style=\"font-style: italic; border: 1px solid #CEE; padding: 0 2px\" \n   class=\"tooltip_target\">" + string + "</a>";
      _ref = [$(element).html().slice(0, index), $(element).html().slice(index, indexMax), $(element).html().slice(indexMax)], _left = _ref[0], _mid = _ref[1], _right = _ref[2];
      _mid_new = _mid.replace(string, _wrapElement);
      _new_html = _left + _mid_new + _right;
      $(element).html(_new_html);
    }
    result_strings = [];
    _ref1 = response.result;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      result = _ref1[_i];
      _ref2 = result.lookups;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        lookup = _ref2[_j];
        if (lookup.right.length > 1) {
          clean_right = [];
          _ref3 = lookup.right;
          for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
            r = _ref3[i];
            clean_right.push("" + (i + 1) + ". " + r);
          }
          right = clean_right.join(', ');
        } else {
          right = lookup.right[0];
        }
        result_string = "<em>" + lookup.left + "</em> (" + lookup.pos + ") &mdash; " + right;
        result_strings.push(result_string);
      }
    }
    if (result_strings.length === 0 || response.success === false) {
      if (opts.tooltip) {
        _tooltipTitle = 'Unknown word';
      }
    }
    if (opts.tooltip) {
      if (!_tooltipTitle) {
        _tooltipTitle = string;
      }
      _tooltipTarget = $(element).find('a.tooltip_target');
      _tooltipTarget.popover({
        title: _tooltipTitle,
        content: $("<p />").html(result_strings.join('<br />')).html(),
        html: true,
        placement: 'bottom',
        trigger: 'hover'
      });
      return _tooltipTarget.popover('show');
    } else {
      $(result_elem).html("");
      _results = [];
      for (_l = 0, _len3 = result_strings.length; _l < _len3; _l++) {
        _str = result_strings[_l];
        _results.push($(result_elem).append($("<p />").html(_str)));
      }
      return _results;
    }
  };
  lookupSelectEvent = function(evt, string, element, index, opts) {
    var langpair, lookup_string, post_data, result_elem, source_lang, spinner, target_lang,
      _this = this;
    result_elem = $(opts.formResults);
    spinner = initSpinner();
    string = $.trim(string);
    if ((string.length > 60) || (string.search(' ') > -1)) {
      return false;
    }
    if (string !== "") {
      langpair = $(opts.langPairSelect).val();
      source_lang = langpair.slice(0, 3);
      target_lang = langpair.slice(3, 6);
      lookup_string = string;
      post_data = {
        lookup: lookup_string,
        lemmatize: true
      };
      return $.ajax({
        beforeSend: function(args) {
          return spinner.show();
        },
        complete: function(args) {
          return spinner.hide();
        },
        url: "" + opts.api_host + "/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
        type: "GET",
        dataType: "json",
        data: post_data,
        cache: true,
        success: function(response) {
          var selection;
          selection = {
            string: string,
            element: element,
            index: index
          };
          return cleanTooltipResponse(selection, response, opts);
        },
        error: function() {
          $(document).find('body').find('.errornav').remove();
          return $(document).find('body').append(ErrorBar({
            host: opts.hostname
          }));
        }
      });
    }
  };
  $.fn.selectToLookup = function(opts) {
    var clean, holdingOption,
      _this = this;
    opts = $.extend({}, $.fn.selectToLookup.options, opts);
    if (opts.displayOptions) {
      $(document).find('body').append(Templates.OptionsTab());
    }
    holdingOption = function(evt, string, element, index) {
      if (evt.altKey) {
        lookupSelectEvent(evt, string, element, index, opts);
      }
      return false;
    };
    clean = function(event) {
      var parent, parents, _i, _len, _results;
      parents = [];
      $(document).find('a.tooltip_target').each(function() {
        parents.push($(this).parent());
        $(this).popover('destroy');
        return $(this).replaceWith(this.childNodes);
      });
      _results = [];
      for (_i = 0, _len = parents.length; _i < _len; _i++) {
        parent = parents[_i];
        _results.push(parent.html(parent.html()));
      }
      return _results;
    };
    $(document).bind('textselect', holdingOption);
    return $(document).bind('click', clean);
  };
  $.fn.selectToLookup.options = {
    api_host: API_HOST,
    formResults: "#results",
    sourceLanguage: "sme",
    langPairSelect: "#webdict_options *[name='language_pair']:checked",
    tooltip: true,
    displayOptions: true
  };
  $.fn.kursaDict = function(opts) {
    opts = $.extend({}, $.fn.kursaDict.options, opts);
    return this.each(function() {
      var elem, result_elem, spinner,
        _this = this;
      elem = $(this);
      result_elem = $(this).find('#results');
      spinner = initSpinner();
      return elem.submit(function() {
        var cleanResponse, lookup_value, post_data, source_lang, target_lang, unknownWord;
        lookup_value = $(_this).find('input[name="lookup"]').val();
        target_lang = $(_this).find('input[name="target_lang"]:checked').val();
        source_lang = $(_this).find('input[name="source_lang"]').val();
        post_data = {
          lookup: lookup_value
        };
        if (lookup_value.slice(-1) === '*') {
          post_data.type = 'startswith';
          post_data.lookup = post_data.lookup.replace('*', '');
        }
        unknownWord = function(response) {
          $(result_elem).append($("<p>Unknown word.</p>"));
          return false;
        };
        cleanResponse = function(response) {
          var lookup, result, _i, _len, _ref, _results;
          $(result_elem).html("");
          if (response.success === false) {
            unknownWord();
          }
          if ((response.result.length === 1) && !response.result[0].lookups) {
            unknownWord();
          }
          _ref = response.result;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            result = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = result.lookups;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                lookup = _ref1[_j];
                _results1.push($(result_elem).append($("<p>" + lookup.left + " (" + lookup.pos + ") &mdash; " + lookup.right + "</p>")));
              }
              return _results1;
            })());
          }
          return _results;
        };
        $.ajax({
          beforeSend: function(args) {
            return spinner.show();
          },
          complete: function(args) {
            return spinner.hide();
          },
          url: "" + opts.api_host + "/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
          type: "GET",
          data: post_data,
          dataType: "json",
          cache: true,
          success: cleanResponse,
          error: function() {
            $(result_elem).find('.alert').remove();
            return $(result_elem).append($("<div class=\"alert\">\n  <strong>Error!</strong> could not connect to dictionary server (" + opts.api_host + ").\n</div>"));
          }
        });
        return false;
      });
    });
  };
  return $.fn.kursaDict.options = {
    api_host: API_HOST,
    formIDName: "#kursadict",
    formResults: "#results"
  };
});
