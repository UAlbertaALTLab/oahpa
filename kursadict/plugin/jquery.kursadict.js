// Generated by CoffeeScript 1.3.3
/*
A jQuery plugin for enabling the Kursadict functionality

# Installation

HTML header

TODO: clarify how to install this somewhere.


# Development / testing

Install node.js and npm, and then coffeescript.

## building

Must be compiled with --bare, to prevent function wrapping that disables
jQuery.

    coffee --compile --bare jquery.kursadict.coffee  

## watch

    coffee --compile --watch --bare jquery.kursadict.coffee  

## TODOs

TODO: language dropdowns for nob-sme fin-sme, etc., autodetect from browser
      language first, fall back to nob otherwise

TODO: loading indicator / user feedback for when something is in progress.
*/

(jQuery(function($) {
  var lookupSelectEvent;
  lookupSelectEvent = function(evt, string, element, opts) {
    var cleanResponse, lookup_string, post_data, result_elem, source_lang, target_lang,
      _this = this;
    result_elem = $('#results');
    cleanResponse = function(response) {
      var lookup, result, result_string, result_strings, _i, _j, _k, _len, _len1, _len2, _new_html, _ref, _ref1, _results, _str, _tooltipTarget, _tooltipTitle, _wrapElement;
      if (response.success === false) {
        console.log("No words found.");
        return false;
      }
      if (opts.tooltip) {
        $(element).find('a.tooltip_target').each(function() {
          $(this).popover('destroy');
          return $(this).replaceWith(this.childNodes);
        });
        _wrapElement = "<a style=\"font-style: italic; border: 1px solid #CEE; padding: 0 2px\" \n   class=\"tooltip_target\">" + string + "</a>";
        _new_html = $(element).html().replace(string, _wrapElement);
        $(element).html(_new_html);
      }
      result_strings = [];
      _ref = response.result;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        _ref1 = result.lookups;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          lookup = _ref1[_j];
          result_string = "<em>" + lookup.left + "</em> (" + lookup.pos + ") &mdash; " + lookup.right;
          result_strings.push(result_string);
        }
      }
      if (result_strings.length === 0) {
        if (opts.tooltip) {
          _tooltipTitle = 'Unknown word';
        }
      }
      if (opts.tooltip) {
        if (!_tooltipTitle) {
          _tooltipTitle = string;
        }
        _tooltipTarget = $(element).find('a.tooltip_target');
        _tooltipTarget.popover({
          title: _tooltipTitle,
          content: $("<p />").html(result_strings.join('<br />')).html(),
          html: true,
          placement: 'bottom',
          trigger: 'hover'
        });
        _tooltipTarget.popover().click(function(e) {
          return $(e).popover('destroy');
        });
        return _tooltipTarget.popover('show');
      } else {
        $(result_elem).html("");
        _results = [];
        for (_k = 0, _len2 = result_strings.length; _k < _len2; _k++) {
          _str = result_strings[_k];
          _results.push($(result_elem).append($("<p />").html(_str)));
        }
        return _results;
      }
    };
    if ((string.length > 60) || (string.search(' ') > -1)) {
      return false;
    }
    if (string !== "") {
      source_lang = opts.sourceLanguage;
      console.log(source_lang);
      target_lang = $(opts.targetLanguageSelect).val();
      lookup_string = string;
      post_data = {
        lookup: lookup_string,
        lemmatize: true
      };
      return $.ajax({
        url: "http://testing.oahpa.no/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
        type: "POST",
        dataType: "json",
        data: JSON.stringify(post_data),
        cache: true,
        success: cleanResponse,
        fail: function() {
          return console.log("omg2");
        }
      });
    }
  };
  $.fn.selectToLookup = function(opts) {
    var holdingOption,
      _this = this;
    opts = $.extend({}, $.fn.selectToLookup.options, opts);
    holdingOption = function(evt, string, element) {
      if (evt.altKey) {
        return lookupSelectEvent(evt, string, element, opts);
      }
    };
    return $(document).bind('textselect', holdingOption);
  };
  $.fn.selectToLookup.options = {
    tooltip: false,
    sourceLanguage: "sme",
    targetLanguageSelect: "select[name='target_lang']"
  };
  return $.fn.kursaDict = function(opts) {
    opts = $.extend({}, $.fn.kursaDict.options, opts);
    return this.each(function() {
      var elem, result_elem,
        _this = this;
      elem = $(this);
      result_elem = $(this).find('#results');
      return elem.submit(function() {
        var cleanResponse, lookup_value, post_data, source_lang, target_lang;
        lookup_value = $(_this).find('input[name="lookup"]').val();
        target_lang = $(_this).find('input[name="target_lang"]:checked').val();
        source_lang = $(_this).find('input[name="source_lang"]').val();
        console.log(target_lang);
        post_data = {
          lookup: lookup_value
        };
        if (lookup_value.slice(-1) === '*') {
          post_data.type = 'startswith';
          post_data.lookup = post_data.lookup.replace('*', '');
        }
        cleanResponse = function(response) {
          var lookup, result, _i, _len, _ref, _results;
          if (response.success === false) {
            console.log("No words found.");
          }
          $(result_elem).html("");
          _ref = response.result;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            result = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = result.lookups;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                lookup = _ref1[_j];
                _results1.push($(result_elem).append($("<p>" + lookup.left + " (" + lookup.pos + ") &mdash; " + lookup.right + "</p>")));
              }
              return _results1;
            })());
          }
          return _results;
        };
        $.ajax({
          url: "http://testing.oahpa.no/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
          type: "POST",
          dataType: "json",
          data: JSON.stringify(post_data),
          cache: true,
          success: cleanResponse,
          fail: function() {
            return console.log("omg2");
          }
        });
        console.log("submitted");
        return false;
      });
    });
  };
}))(jQuery);
