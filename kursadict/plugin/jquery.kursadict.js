// Generated by CoffeeScript 1.3.3
/*
A jQuery plugin for enabling the Kursadict functionality

# Installation

HTML header

TODO: clarify how to install this somewhere.


# Development / testing

Install node.js and npm, and then coffeescript.

## building

Must be compiled with --bare, to prevent function wrapping that disables
jQuery.

    coffee --compile --bare jquery.kursadict.coffee

## watch

    coffee --compile --watch --bare jquery.kursadict.coffee

## TODOs

TODO: autodetect from browser language first, fall back to nob otherwise

TODO: debugging for misc browsers where there are issues.

TODO: check globally for wraps instead of just in element, remove them;
      make sure .classname is much more random

TODO: prevent window url from updating with form submit params
*/

(jQuery(function($) {
  var API_HOST, cleanTooltipResponse, initSpinner, lookupSelectEvent;
  API_HOST = "http://testing.oahpa.no/";
  initSpinner = function() {
    /*
            spinner popup in right corner; `spinner = initSpinner()` to
            create or find, then usual `spinner.show()` or `.hide()` as
            needed.
    */

    var spinner, spinnerExists;
    spinnerExists = $('body').find('spinner');
    if (spinnerExists.length === 0) {
      spinner = $("<img src=\"img/spinner.gif\" class=\"spinner\" />");
      spinner.css({
        display: "none",
        position: "absolute",
        top: "0px",
        right: "0px"
      });
      $('body').append(spinner);
      return spinner;
    }
    return spinnerExists;
  };
  cleanTooltipResponse = function(string, element, response, opts) {
    /*
            Clean response from tooltip $.ajax query, and display results
    */

    var lookup, result, result_string, result_strings, _i, _j, _k, _len, _len1, _len2, _new_html, _ref, _ref1, _results, _str, _tooltipTarget, _tooltipTitle, _wrapElement;
    if (opts.tooltip) {
      $(element).find('a.tooltip_target').each(function() {
        $(this).popover('destroy');
        return $(this).replaceWith(this.childNodes);
      });
      _wrapElement = "<a style=\"font-style: italic; border: 1px solid #CEE; padding: 0 2px\" \n   class=\"tooltip_target\">" + string + "</a>";
      _new_html = $(element).html().replace(string, _wrapElement);
      $(element).html(_new_html);
    }
    result_strings = [];
    _ref = response.result;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      result = _ref[_i];
      _ref1 = result.lookups;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        lookup = _ref1[_j];
        result_string = "<em>" + lookup.left + "</em> (" + lookup.pos + ") &mdash; " + lookup.right;
        result_strings.push(result_string);
      }
    }
    if (result_strings.length === 0 || response.success === false) {
      if (opts.tooltip) {
        _tooltipTitle = 'Unknown word';
      }
    }
    if (opts.tooltip) {
      if (!_tooltipTitle) {
        _tooltipTitle = string;
      }
      _tooltipTarget = $(element).find('a.tooltip_target');
      _tooltipTarget.popover({
        title: _tooltipTitle,
        content: $("<p />").html(result_strings.join('<br />')).html(),
        html: true,
        placement: 'bottom',
        trigger: 'hover'
      });
      return _tooltipTarget.popover('show');
    } else {
      $(result_elem).html("");
      _results = [];
      for (_k = 0, _len2 = result_strings.length; _k < _len2; _k++) {
        _str = result_strings[_k];
        _results.push($(result_elem).append($("<p />").html(_str)));
      }
      return _results;
    }
  };
  lookupSelectEvent = function(evt, string, element, opts) {
    var lookup_string, post_data, result_elem, source_lang, spinner, target_lang,
      _this = this;
    result_elem = $(opts.formResults);
    spinner = initSpinner();
    string = string.trim();
    if ((string.length > 60) || (string.search(' ') > -1)) {
      return false;
    }
    if (string !== "") {
      source_lang = opts.sourceLanguage;
      target_lang = $(opts.targetLanguageSelect).val();
      lookup_string = string;
      post_data = {
        lookup: lookup_string,
        lemmatize: true
      };
      return $.ajax({
        beforeSend: function(args) {
          return spinner.show();
        },
        complete: function(args) {
          return spinner.hide();
        },
        url: "" + opts.api_host + "/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
        type: "GET",
        dataType: "json",
        data: post_data,
        cache: true,
        success: function(response) {
          return cleanTooltipResponse(string, element, response, opts);
        },
        error: function() {
          $('body').find('.errornav').remove();
          $('body').append($("<div class=\"errornav navbar-inverse navbar-fixed-bottom\">\n  <div class=\"navbar-inner\">\n    <div class=\"container\">\n      <p><strong>Error!</strong> Could not connect to dictionary server. <a href=\"#\" class=\"dismiss\">Close</a>.</p>\n    </div>\n  </div>\n</div>"));
          return $('body').find('.errornav .dismiss').click(function() {
            $('body .errornav').remove();
            return false;
          });
        }
      });
    }
  };
  $.fn.selectToLookup = function(opts) {
    var holdingOption,
      _this = this;
    opts = $.extend({}, $.fn.selectToLookup.options, opts);
    holdingOption = function(evt, string, element) {
      if (evt.altKey) {
        return lookupSelectEvent(evt, string, element, opts);
      }
    };
    return $(document).bind('textselect', holdingOption);
  };
  $.fn.selectToLookup.options = {
    api_host: API_HOST,
    formResults: "#results",
    sourceLanguage: "sme",
    targetLanguageSelect: "select[name='target_lang']",
    tooltip: false
  };
  $.fn.kursaDict = function(opts) {
    opts = $.extend({}, $.fn.kursaDict.options, opts);
    return this.each(function() {
      var elem, result_elem, spinner,
        _this = this;
      elem = $(this);
      result_elem = $(this).find('#results');
      spinner = initSpinner();
      return elem.submit(function() {
        var cleanResponse, lookup_value, post_data, source_lang, target_lang, unknownWord;
        lookup_value = $(_this).find('input[name="lookup"]').val();
        target_lang = $(_this).find('input[name="target_lang"]:checked').val();
        source_lang = $(_this).find('input[name="source_lang"]').val();
        post_data = {
          lookup: lookup_value
        };
        if (lookup_value.slice(-1) === '*') {
          post_data.type = 'startswith';
          post_data.lookup = post_data.lookup.replace('*', '');
        }
        unknownWord = function(response) {
          $(result_elem).append($("<p>Unknown word.</p>"));
          return false;
        };
        cleanResponse = function(response) {
          var lookup, result, _i, _len, _ref, _results;
          $(result_elem).html("");
          if (response.success === false) {
            unknownWord();
          }
          if ((response.result.length === 1) && !response.result[0].lookups) {
            unknownWord();
          }
          _ref = response.result;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            result = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = result.lookups;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                lookup = _ref1[_j];
                _results1.push($(result_elem).append($("<p>" + lookup.left + " (" + lookup.pos + ") &mdash; " + lookup.right + "</p>")));
              }
              return _results1;
            })());
          }
          return _results;
        };
        $.ajax({
          beforeSend: function(args) {
            return spinner.show();
          },
          complete: function(args) {
            return spinner.hide();
          },
          url: "" + opts.api_host + "/kursadict/lookup/" + source_lang + "/" + target_lang + "/",
          type: "GET",
          data: post_data,
          dataType: "json",
          cache: true,
          success: cleanResponse,
          error: function() {
            $(result_elem).find('.alert').remove();
            return $(result_elem).append($("<div class=\"alert\">\n  <strong>Error!</strong> could not connect to dictionary server.\n</div>"));
          }
        });
        return false;
      });
    });
  };
  return $.fn.kursaDict.options = {
    api_host: API_HOST,
    formIDName: "#kursadict",
    formResults: "#results"
  };
}))(jQuery);
