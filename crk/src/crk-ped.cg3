

#   ============================ #
#!! !!!Plains Cree nehiyametan syntactic parser 
#   ============================ #


# ========== #
# Delimiters #
# ========== #


DELIMITERS = "<.>" "<!>" "<?>" "<¶>";



# ============= #
# Tags and sets #
# ============= #


# ========
   SETS
# ========

LIST BOS = (>>>) (<s>); 
LIST EOS = (<<<) (</s>); # vislcg and CG-2 together.

LIST N = N ;
LIST V = V ;

LIST Ipc = Ipc ;
LIST Interj = Interj ;

LIST Adv = Adv ;
LIST CC = CC ;
LIST CS = CS ;
LIST Det = Det ;

LIST AN = AN ;
LIST IN = IN ;

LIST IA = IA ;
LIST II = II ;
LIST TA = TA ;
LIST TI = TI ;


LIST Cnj = Cnj ;
LIST ConNeg = ConNeg ;
LIST Cond = Cond ;
LIST Def = Def ;
LIST Del = Del ;
LIST Dem = Dem ;
LIST Dim = Dim ;
LIST Dim/Der = Dim/Der ;
LIST Dist = Dist ;
LIST Fut = Fut ;
LIST Imm = Imm ;
LIST Imp = Imp ;
LIST Incl = Incl ;
LIST Ind = Ind ;
LIST Inf = Inf ;
LIST Int = Int ;
LIST Interr = Interr ;
LIST Loc = Loc ;
LIST Med = Med ;
LIST Neg = Neg ;
LIST Num = Num ;
LIST Obv =  Obv ;
LIST Pos = Pos ;
LIST Prf = Prf ;
LIST Pron = Pron ;
LIST Prox = Prox ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Qst = Qst ;
LIST Sbj = Sbj ;

LIST SgO = SgO ;
LIST P2lO = P2lO ;
LIST Pl = Pl ;
LIST PlO = PlO ;
LIST 12Pl = 12Pl ;
LIST 1Pl = 1Pl ;
LIST 1PlO = 1PlO ;
LIST Sg = Sg ;
LIST 1Sg = 1Sg ;
LIST 1SgO = 1SgO ;
LIST 2Pl = 2Pl ;
LIST 2Sg = 2Sg ;
LIST 2SgO = 2SgO ;
LIST 3Pl = 3Pl ;
LIST 3PlO = 3PlO ;
LIST 3Sg = 3Sg ;
LIST 3SgO = 3SgO ;
LIST 4Pl = 4Pl ;
LIST 4PlO = 4PlO ;
LIST 4Sg = 4Sg ;
LIST 4SgO = 4SgO ;
LIST 5Sg = 5Sg ;

LIST Px12Pl = Px12Pl ;
LIST Px1Pl = Px1Pl ;
LIST Px1Sg = Px1Sg ;
LIST Px2Pl = Px2Pl ;
LIST Px2Sg = Px2Sg ;
LIST Px3Pl = Px3Pl ;
LIST Px3Sg = Px3Sg ;
LIST Px4Pl = Px4Pl ;
LIST Px4Sg = Px4Sg ;
LIST Der/Dim = Der/Dim ;


# Sets
# ====

LIST QDL = QDL ;
LIST QMRK = ? Guess ;

LIST WORD = N V Ipc Interj ;

LIST COPULA = "be" ;
LIST VFIN = (V 1Sg) (V 2Sg) (V 3Sg) (V 4Sg) (V 5Sg) (V 1Pl) (V 2Pl) (V 3Pl) (V 4Pl) (V 5Pl) ;

SET NOT-VERB = WORD - V ;
LIST NPMOD = A Det ;
SET NOT-NPMOD = WORD - NPMOD ;

LIST NUMBER = Sg Pl ;
LIST GENDER = AN IN ;
SET NUMBERGENDER = (AN Sg) OR (AN Pl) OR (IN Sg) OR (IN PL) ;

# Noun sets

LIST HUMAN = "awâsis" "okimâw" "iyiniw" "iskwêw" ;

# Boundary sets

# Complementary set

# Case sets

# Some case, but not...

LIST COMMA = (",") ;
SET MARK =  COMMA | ("\\") | ("\;") ; #"

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;
SET PRE-APP   = COMMA OR PUNCT-LEFT ;
LIST &trans = &trans ;

# Translation sets, add synonyms
LIST SHOE = "maskisin" ;
LIST KNIFE = "môhkomân" "môhkomânis" ;
LIST SPOON = "êmihkwân" ;
LIST BREAD = "pahkwêsikan" ;
LIST SUGAR = "sîwinikan" ;
LIST CARROT = "oskâtâsk" "oskâcâskos" ;
LIST DOG = "atim" ;
LIST MAN = "nâpêw" ;
LIST WOMAN = "iskwêw" ;
LIST CAT = "minôs" ;
LIST FISH = "kinosêw" ;
LIST MEAT = "wiyâs" ;
LIST BACON = "kohkôsiwiyin" ;
LIST MILK = "tohtôsâpoy" ;
LIST STORE = "atâwêwikamik" ;
LIST EGG = "wâwi" ;
LIST CHAIR = "têhtapiwinak" ;
LIST POTATO = "askipwâwi" ;


# Here come the rules #

BEFORE-SECTIONS 

SECTION

# looking for typos
MAP (&err-typo) TARGET QMRK (*-1 QDL) ;

# looking for incorrect translation, error tag mapped to the English word
MAP (&err-transN) TARGET N IF (0 ("shoe"))(*1 QDL LINK NOT *1 SHOE) ; 
SELECT N IF (0 SHOE LINK *-1 ("^qdl") LINK *-1 ("shoes")) ; 

MAP (&err-transN) TARGET N IF (0 ("knife"))(*1 QDL LINK NOT *1 KNIFE) ; 
MAP (&err-transN) TARGET N IF (0 ("spoon"))(*1 QDL LINK NOT *1 SPOON) ; 
MAP (&err-transN) TARGET N IF (0 ("bread"))(*1 QDL LINK NOT *1 BREAD) ; 
MAP (&err-transN) TARGET N IF (0 ("sugar"))(*1 QDL LINK NOT *1 SUGAR) ; 
MAP (&err-transN) TARGET N IF (0 ("carrot"))(*1 QDL LINK NOT *1 CARROT) ; 
MAP (&err-transN) TARGET N IF (0 ("dog"))(*1 QDL LINK NOT *1 DOG) ; 
MAP (&err-transN) TARGET N IF (0 ("man"))(*1 QDL LINK NOT *1 MAN) ; 
MAP (&err-transN) TARGET N IF (0 ("woman"))(*1 QDL LINK NOT *1 WOMAN) ; 
MAP (&err-transN) TARGET N IF (0 ("cat"))(*1 QDL LINK NOT *1 CAT) ; 
MAP (&err-transN) TARGET N IF (0 ("fish"))(*1 QDL LINK NOT *1 FISH) ; 
MAP (&err-transN) TARGET N IF (0 ("meat"))(*1 QDL LINK NOT *1 MEAT) ; 
MAP (&err-transN) TARGET N IF (0 ("bacon"))(*1 QDL LINK NOT *1 BACON) ; 
MAP (&err-transN) TARGET N IF (0 ("milk"))(*1 QDL LINK NOT *1 MILK) ; 
MAP (&err-transN) TARGET N IF (0 ("store"))(*1 QDL LINK NOT *1 STORE) ; 
MAP (&err-transN) TARGET N IF (0 ("egg"))(*1 QDL LINK NOT *1 EGG) ; 
MAP (&err-transN) TARGET N IF (0 ("chair"))(*1 QDL LINK NOT *1 CHAIR) ; 
MAP (&err-transN) TARGET N IF (0 ("potato"))(*1 QDL LINK NOT *1 POTATO) ; 



# looking for incorrect word order, error tag mapped to QDL
MAP (&err-demAttr) TARGET QDL IF (*-1 N LINK *-1 COPULA BARRIER NOT-NPMOD LINK -1 Dem)(1 N LINK 1 Dem) ; 
MAP (&err-demPred) TARGET QDL IF (*-1 N LINK *-1 COPULA BARRIER NOT-NPMOD LINK -1 Dem)(1 Dem LINK 1 N) ; 

# looking for incorrect number or distance, error tag mapped to the English Det
LIST DemDistance = Med Prox ;
LIST DemNumber = Sg Pl ;

MAP (&err-number) TARGET Det IF (0 $$DemNumber)(*1 QDL LINK NOT *1 $$DemNumber) ; 
MAP (&err-distance) TARGET Det IF (0 $$DemDistance)(*1 QDL LINK NOT *1 $$DemDistance) ; 

# looking for incorrect morphosyntax, , error tag mapped to the Cree Det
MAP (&err-animacyIN) TARGET Dem IF (0 (Dem AN))((-1 (N IN)) OR (1 (N IN))) ; 
MAP (&err-animacyAN) TARGET Dem IF (0 (Dem IN))((-1 (N AN)) OR (1 (N AN))) ; 



AFTER-SECTIONS 

# messages:
# &err-typo: Is there an incorrect spelled word in your translation? 
# &err-transN: Is the noun translated correctly?
# &err-demAttr: The demonstrative pronoun should come before the noun.
# &err-demPred The demonstrative pronoun should come after the noun.
# &err-number: The demonstrative pronoun must agree in number with the noun.
# &err-distance: Did you write the correct type of demonstrative pronoun?
# &err-animacyIN: An inanimate noun needs an inanimate demonstrative pronoun.
# &err-animacyAN: An animate noun needs an animate demonstrative pronoun.


END
