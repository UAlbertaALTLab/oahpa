!!!NUMERAL - DRILL:

The game is called __Logut__, we now would like a new name, and we 
go for __Numra__.

!!Drill procedure (implemented)
1. Machine gives an arabic, the user writes it with letters.

* M: 28
* U: guoktelogigávcci

2. Machine gives a numeral written with letters, the user writes the arabic.

* M: guoktelogigávcci
* U: 28


!!Extension (not implemented)
The same should be done for clock (time) practice also.

For the numeral drill, the programs are __sme-num.fst__, etc. Now, we 
have clock transducers for sme and smj also (and in principle for sma, 
but that one is not checked). They should be incorporated just as the 
number games. The files are:

* gt/sme/bin/clock-sme.fst
* gt/sme/bin/iclock-sme.fst
* gt/sme/bin/clock-smj.fst
* gt/sme/bin/iclock-smj.fst

The files are compiled via the standard makefile, or via the command 

* ''make iclock TARGET=sme'' etc.

!! Ways of utilising the clock

!The clock page

The clock should get a page of its own, with its own name.

Here, we may think of different game forms:

* Digital to words and words to digital form
** This is in principle the same as the one for Numra
* Words to analog clock pictures (and vice versa?)
** This could have children learning the clock as a target group
* One might even see an animation of this: U moves the hands of the
  clock, and the M tells what the time is.

!The clock in the dialogues

The clock fst-s may generate times for the dialogue.

It is also possible to ask questions about the time, and evaluate
the answers:

{{{
M: What time is it?
U: It is half past two?
M: Oh, I think it is only twentynine past two
...
M: When will you leave?
U: Tomorrow
M: When tomorrow?
U: At half to four
M: You should rather say "at half past three"
}}}





