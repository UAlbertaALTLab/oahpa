!!!A typology of question templates


These are important documents:  

* ped/sme/xml/dialogue_visit.xml -   
* ped/sme/xml/dialoguepart_calendar.xml - with questions/anwers/feedback - now with translations to English
* ped/sme/xml/dialogue_firstmeeting.xml - with open questions
* ped/doc/dialogueparts.txt - ideas for topics

The dialogues are made of elements, and we can write the dialogues if we can agree on the possible type of elements even if not all the programming is ready. 


!!Elements


!Setting

Every dialogue has a setting, e.g. cafe. The dialogue contains several topics, e.g. drinking, eating, paying. 
The setting is given to U by M as an utterance or as a set of utterances in the beginning of the dialogue.

!Topic

Every topic contains several questions and utterances. e.g. Do you drink coffee?

Every topic starts with s "opening"-utt and in the end is a "closing"-utt. This makes it easy to put many topics together.


!Utterances

M gives utterances to make the conversation more natural and give the impression of a two-way communication. It is also good teaching because U will get a model for her own answer.

The utterances may be encoded in the dialogue source code as the following type of elements (note the underscore):

{{{
<question name="utterance_string">
<utt>utterance string</utt>
<opening>utterance string</opening>
<closing>utterance string</closing>
}}}

!!The 4 question types

WWe operate with 4 types of questions (all of them should be implemented in the perl-demo)

!Type 1. Open Wh-question

 - the answer should be in right case, but it has no consequenses for the next question.    If the answer cannot be processed, we may run the answer through the orthographical speller (not for person names), and then to default. (Person names may be accounted for by making a ped-transducer with a name guesser). Example:

* What kind of work do you have?
	
!Type 2. Alternative-question

 - with answer alternatives (gived as a list to the program) - it can be presented for U as a picture, or be implicit in the question. The answer determines the next action. If U answers something outside the alternatives, then M comments like "I have not got that. Here you see what I have got." M does not have to "understand" the answer. Example:

* What do you want to eat? (answer is from the list, or an unknown object, or no object)
* Do you want coffee or tea? (answer is coffee, or tea, or negation)
	
!Type 3. Correct/not-correct Wh-question

 - there is only one correct answer, in a picture or something else. Feedback to U about the correct formulation. Example:

* When is Lemet´s birhtday?  
* Which car is the most expensive one?
* In which month is Easter?
* When does the school start up after the summervacation?


!Type 4. go-question (yes-no-questions)

 - answer determines the next action. Example:

* Do you want coffee?

	
!!Tutorial comments

 - This is just a start - there are some more examples in ped/sme/xml/dialoguepart_calendar.xml

!1. speller

 - (if the words are not correctly spelled, M will not know them.)

(We may eventually consider another option: Have a lexicon-free speller (i.e., take a standalone Levenshtein implementation, and try to match the user feedback to the target list; e.g. borkemannu is considered a hit for borgemánu, since it has levenshtein-disctance 3. With such a small set of targets, we may even allow long distances, but always pick the closest candidate.)
  

!2. clarifying question

Example: In which month does school start? It can not be the correct month!

!3. Lexical help

You perhaps do not know the name of the months? + a list of the months names. (Also here, we may combine this with a lexicon-free speller, and comment upon the error: When do you arrive? (target X-mánus, answer. borgemánnus, feedback: "You wrote 'borgemánnus' but the correct form is 'borgemánus')

!4. Grammatical help

Example: "liikot-verb demands illative - e.g. Mun liikon guollái." "Do you want to learn more about illative?"
or "We write dates like this - borgemánu 20.b."
 

