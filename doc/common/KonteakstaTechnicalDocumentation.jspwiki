!!!Technical documentation

* [The main Konteaksta background document|../nudoc/konteaksta.html]
* The test url: [http://gtlab.uit.no:8080/teaksta]

The core of Konteaksta is implemented as a Java servlet on Apache Tomcat web server. 

Updating the code on gtlab

* cd /home/teaksta
* svn up
* ./make_teaksta.sh

Sometimes the restart of the Tomcat web server is needed as well:

* cd $CATALINA_HOME
* sudo bin/shutdown.sh
* sudo bin/startup.sh

The logs of running Konteaksta can be found in the directory {{$CATALINA_HOME/logs/}}.

!!!File structure

The source code of North SÃ¡mi Konteaksta is in {{$GTHOME/apps/teaksta/sme/src/main}}.

Exercise topics are defined in {{src/main/webapp/activities/}}.
Each topic has its folder.

* Adverbial/           
* InfiniteVerbs/       
* Object/              
* SubstantivePlural/   
* VerbConjugation/     
* Conjunctions/        
* NegVerbs/            
* Subject/             
* SubstantiveSingular/ 
 

For each folder, there are two files:

* activity.xml
* help.jsp

The former defines preprossessing and post-processing pipelines (those are defined in separate xml-files that can be found under the {{desc/}}-folder) and tag sequences that identify the words that are relevant for the exercise.

The latter gives the help text provided to the user.

Instructions of how to add a new exercise topic are in the file {{$GTHOME/apps/teaksta/sme/EXTENDING}}.

!!!How the program works

Konteaksta front page is {{src/main/webapp/index.html}}. It is written in HTML and Javascript. When pressing the button "Go!" the Java servlet will be run that does the following:

# preprocessing: 
## extracting the textual content from the webpage
## tokenisation
## sentence boundary detection
## linguistic annotation ({{src/main/java/werti/uima/ae/Vislcg3Annotator.java}})
### morphological analysis (FST)
### morphological disambiguation (CG)
### shallow syntactic parsing (CG)
# postprocessing (one of the ''Topic''Enhancer.java files in {{src/main/java/werti/uima/enhancer/}}): 
## Selection of the tokens that are relevant for the topic
## Enhancement - enriching the HTML code with additional attributes. The relevant tokens will be marked and provided with attributes as __lemma__, __distractors__ and __answer__.
# Loads the enhanced page to the browser. The four different exercise types (color, click, multiple choice, cloze) are implemented in Javascript.

!!!Example of enhanced HTML code

{{{
<span id="WERTi-span- Ind Prt-2" 	     
      class="wertiviewtoken  wertiviewVerbConjugation" 
      lemma="leat" 
      distractors="leat lean leat leahkit leame leamen leahkime lea " 
      answer="lei leai ">  lei
</span>
}}}

If the enhancement does not work as expected we usually can find out why by looking at the page's source.
